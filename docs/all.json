{"shell":true,"revision":"e662a70301a7290cf7e473f415a494072248c6c2","objects":[{"type":null,"source":"lib/ex_image_info.ex:4","object_type":"ModuleObject","moduledoc":"ExImageInfo is an Elixir library to parse images (binaries) and get the dimensions, detected mime-type and overall validity for a set of image formats. Main module to parse a binary and get if it seems to be an image (validity), the mime-type (and variant detected) and the dimensions of the image, based on a specific image format.\n\nIt has convention functions to guess the type of an image\nby trying the formats supported by the library.\n\n## Main features\n\n- Check the validity of binary by providing a specific image format*.\n- Guess the validity of an image*.\n- Get the mime-type and variant type by providing a specific format.\n- Guess the mime-type and variant type of an image.\n- Get the dimensions of an image by providing a specific format.\n- Guess the dimensions of an image.\n\n*Note: both cases as a general overview (partially checked).\n\n## Formats\n\nSupported formats (image type to be parsed as):\n- `:bmp`\n- `:gif`\n- `:jpeg`\n- `:png`\n- `:psd`\n- `:tiff`\n- `:webp`\n\n## Mime-types and Variants\n\nThe image variant type is an invented string to identify the\ntype of format recognized by this library (more specific than the\nmime-type).\n\nEach mime-type can be linked to at least one variant type:\n\n| mime-type    | variant type | description        |\n| ------------ | ------------ | ------------------ |\n| `image/bmp`  | `BMP`        |                    |\n| `image/gif`  | `GIF87a`     | 87a gif spec       |\n| `image/gif`  | `GIF89a`     | 89a gif spec       |\n| `image/jpeg` | `baseJPEG`   | baseline JPEG      |\n| `image/jpeg` | `progJPEG`   | progressive JPEG   |\n| `image/png`  | `PNG`        |                    |\n| `image/psd`  | `PSD`        |                    |\n| `image/tiff` | `TIFFII`     | II variant         |\n| `image/tiff` | `TIFFMM`     | MM variant         |\n| `image/webp` | `webpVP8`    | lossy              |\n| `image/webp` | `webpVP8L`   | lossless           |\n\nThe variant type is created just to provide a bit more of information\nfor every image format (if applicable).\n","module":"Elixir.ExImageInfo","id":"ExImageInfo"},{"type":"def","source":"lib/ex_image_info.ex:235","signature":[["binary",[],null]],"object_type":"FunctionObject","name":"info","module_id":"ExImageInfo","id":"info/1","doc":"Gets the mime-type, variant-type and dimensions (width, height) for the given image binary (*guessed* version of `ExImageInfo.info/2`).\n\nPossible [Mime-types and Variants](#module-mime-types-and-variants) to be returned.\n\nReturns a 4-item tuple with the mime-type, width, height and the variant type when the binary matches, `nil` otherwise.\n\n## Examples\n\n    iex> ExImageInfo.info <<0x38425053::size(32)>>\n    nil\n    iex> ExImageInfo.info <<0x38425053::size(32), 0::size(80), 10::size(32), 12::size(32)>>\n    {\"image/psd\", 12, 10, \"PSD\"}\n\nUsually it is used as:\n\n    ExImageInfo.info File.read!(\"path/to/image.unknown\")\n    # {\"image/tiff\", 128, 256, \"TIFFMM\"}\n\n    webp_full_binary |> ExImageInfo.info\n    # {\"image/webp\", 20, 100, \"webpVP8\"}\n","arity":1},{"type":"def","source":"lib/ex_image_info.ex:195","signature":[["binary",[],null],["format",[],null]],"object_type":"FunctionObject","name":"info","module_id":"ExImageInfo","id":"info/2","doc":"Gets the mime-type, variant-type and dimensions (width, height) for the given image format and binary.\n\nPossible [Mime-types and Variants](#module-mime-types-and-variants) to be returned.\n\nValid [formats](#module-formats) to be used.\n\nReturns a 4-item tuple with the mime-type, width, height and the variant type when the binary matches, `nil` otherwise.\n\n## Examples\n\n`89 50 4E 47 0D 0A 1A 0A` are the first 8 bytes in the `PNG` signature (`PNG\\r\\n0x1A\\n`).\n\n    iex> ExImageInfo.info <<0x89504E470D0A1A0A::size(64)>>, :png\n    nil\n    iex> ExImageInfo.info <<\"RIFF\", 0::size(32), \"WEBPVP8L\", 0::size(32), 0x2F7AC07100358683B68D::size(80)>>, :webp\n    {\"image/webp\", 123, 456, \"webpVP8L\"}\n\nThe signature part of a png it is now enough to get the type (it check also the IHDR field, just before the width and height).\n\nUsually it is used as:\n\n    ExImageInfo.info File.read!(\"path/to/image.gif\"), :gif\n    {\"image/gif\", 1920, 1080, \"GIF87a\"}\n\n    maybe_png_binary |> ExImageInfo.info :png\n    nil\n","arity":2},{"type":"def","source":"lib/ex_image_info.ex:101","signature":[["binary",[],null]],"object_type":"FunctionObject","name":"seems?","module_id":"ExImageInfo","id":"seems?/1","doc":"Sets the shit to the `bin`.\n\nDetects the image format that seems to be the given binary (*guessed* version of `ExImageInfo.seems?/2`).\n\nReturns the atom (valid [formats](#formats)) if it matches, `nil` otherwise.\n\n## Examples\n\n`38 42 50 53` are the first 4 bytes in the `PSD` signature (`8BPS`).\n\n    iex> ExImageInfo.seems? <<0x38425053::size(32)>>\n    :psd\n    iex> ExImageInfo.seems? <<0x384250::size(24)>>\n    nil\n\n`ExImageInfo.seems?/2` and `ExImageInfo.seems?/1` does not necessarily needs a real image (as it is shown in the previous example) because it just checks the signature of every file format.\n\nUsually it is used as:\n\n    ExImageInfo.seems? File.read!(\"path/to/image.unknown\")\n    # :tiff\n\n    webp_full_binary |> ExImageInfo.seems?\n    # :webp\n","arity":1},{"type":"def","source":"lib/ex_image_info.ex:63","signature":[["binary",[],null],["format",[],null]],"object_type":"FunctionObject","name":"seems?","module_id":"ExImageInfo","id":"seems?/2","doc":"Detects if the given binary seems to be in the given image format.\n\nValid [formats](#module-formats) to be used.\n\nReturns `true` if seems to be, `false` otherwise.\n\n## Examples\n\n`89 50 4E 47 0D 0A 1A 0A` are the first 8 bytes in the `PNG` signature (`PNG\\r\\n0x1A\\n`).\n\n    iex> ExImageInfo.seems? <<0x89504E470D0A1A0A::size(64)>>, :png\n    true\n    iex> ExImageInfo.seems? <<0x89504E470D0A1A0A::size(64)>>, :webp\n    false\n\n`ExImageInfo.seems?/2` and `ExImageInfo.seems?/1` does not necessarily needs a real image (as it is shown in the previous example) because it just checks the signature of every file format.\n\nUsually it is used as:\n\n    ExImageInfo.seems? File.read!(\"path/to/image.gif\"), :gif\n    # true\n\n    maybe_png_binary |> ExImageInfo.seems? :png\n    # false\n","arity":2},{"type":"def","source":"lib/ex_image_info.ex:170","signature":[["binary",[],null]],"object_type":"FunctionObject","name":"type","module_id":"ExImageInfo","id":"type/1","doc":"Gets the mime-type and variant type for the given image binary (*guessed* version of `ExImageInfo.type/2`).\n\nPossible [Mime-types and Variants](#module-mime-types-and-variants) to be returned.\n\nReturns a 2-item tuple with the mime-type and the variant type when the binary matches, `nil` otherwise.\n\n## Examples\n\n    iex> ExImageInfo.type <<0x38425053::size(32)>>\n    {\"image/psd\", \"PSD\"}\n    iex> ExImageInfo.type <<0x384250::size(24)>>\n    nil\n\nUsually it is used as:\n\n    ExImageInfo.type File.read!(\"path/to/image.unknown\")\n    # {\"image/tiff\", \"TIFFMM\"}\n\n    webp_full_binary |> ExImageInfo.type\n    # {\"image/webp\", \"webpVP8\"}\n","arity":1},{"type":"def","source":"lib/ex_image_info.ex:130","signature":[["binary",[],null],["format",[],null]],"object_type":"FunctionObject","name":"type","module_id":"ExImageInfo","id":"type/2","doc":"Gets the mime-type and variant type for the given image format and binary.\n\nPossible [Mime-types and Variants](#module-mime-types-and-variants) to be returned.\n\nValid [formats](#module-formats) to be used.\n\nReturns a 2-item tuple with the mime-type and the variant type when the binary matches, `nil` otherwise.\n\n## Examples\n\n`89 50 4E 47 0D 0A 1A 0A` are the first 8 bytes in the `PNG` signature (`PNG\\r\\n0x1A\\n`).\n\n    iex> ExImageInfo.type <<0x89504E470D0A1A0A::size(64)>>, :png\n    nil\n    iex> ExImageInfo.type <<\"RIFF\", 0::size(32), \"WEBPVP8L\", 0::size(32), 0x2F7AC07100358683B68D::size(80)>>, :webp\n    {\"image/webp\", \"webpVP8L\"}\n\nThe signature part of a png it is now enough to get the type (it check also the IHDR field, just before the width and height).\n\nUsually it is used as:\n\n    ExImageInfo.type File.read!(\"path/to/image.gif\"), :gif\n    {\"image/gif\", \"GIF87a\"}\n\n    maybe_png_binary |> ExImageInfo.type :png\n    nil\n","arity":2}],"language":"elixir","git_repo_url":"origin","client_version":"0.5.3","client_name":"inch_ex","branch_name":"master","args":["show","ExImageInfo.info/1"]}